//
// Generated file, do not edit! Created by nedtool 5.6 from inet/_extra/applications/codefagent/CoDefConfig.msg.
//

#ifndef __INET_CODEFCONFIG_M_H
#define __INET_CODEFCONFIG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

struct IntConfigValue;
struct DoubleConfigValue;
class Config;
class SessionConfig;
} // namespace inet


namespace inet {

/**
 * Struct generated from inet/_extra/applications/codefagent/CoDefConfig.msg:18 by nedtool.
 */
struct INET_API IntConfigValue
{
    IntConfigValue();
    uint16_t maxValue;
    uint16_t minValue;
    uint16_t currentValue;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const IntConfigValue& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, IntConfigValue& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IntConfigValue& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IntConfigValue& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from inet/_extra/applications/codefagent/CoDefConfig.msg:24 by nedtool.
 */
struct INET_API DoubleConfigValue
{
    DoubleConfigValue();
    double maxValue;
    double minValue;
    double currentValue;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const DoubleConfigValue& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, DoubleConfigValue& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DoubleConfigValue& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DoubleConfigValue& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>inet/_extra/applications/codefagent/CoDefConfig.msg:30</tt> by nedtool.
 * <pre>
 * class Config
 * {
 *     IntConfigValue heartbeatInterval;
 *     IntConfigValue missingHbAllowed;
 *     IntConfigValue probingRate;
 *     IntConfigValue maxRetransmit;
 *     DoubleConfigValue ackTimeout;
 *     DoubleConfigValue ackRandomFactor;
 * }
 * </pre>
 */
class INET_API Config
{
  protected:
    IntConfigValue heartbeatInterval;
    IntConfigValue missingHbAllowed;
    IntConfigValue probingRate;
    IntConfigValue maxRetransmit;
    DoubleConfigValue ackTimeout;
    DoubleConfigValue ackRandomFactor;

  private:
    void copy(const Config& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Config&);

  public:
    Config();
    Config(const Config& other);
    virtual ~Config();
    Config& operator=(const Config& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual const IntConfigValue& getHeartbeatInterval() const;
    virtual IntConfigValue& getHeartbeatIntervalForUpdate() { return const_cast<IntConfigValue&>(const_cast<Config*>(this)->getHeartbeatInterval());}
    virtual void setHeartbeatInterval(const IntConfigValue& heartbeatInterval);
    virtual const IntConfigValue& getMissingHbAllowed() const;
    virtual IntConfigValue& getMissingHbAllowedForUpdate() { return const_cast<IntConfigValue&>(const_cast<Config*>(this)->getMissingHbAllowed());}
    virtual void setMissingHbAllowed(const IntConfigValue& missingHbAllowed);
    virtual const IntConfigValue& getProbingRate() const;
    virtual IntConfigValue& getProbingRateForUpdate() { return const_cast<IntConfigValue&>(const_cast<Config*>(this)->getProbingRate());}
    virtual void setProbingRate(const IntConfigValue& probingRate);
    virtual const IntConfigValue& getMaxRetransmit() const;
    virtual IntConfigValue& getMaxRetransmitForUpdate() { return const_cast<IntConfigValue&>(const_cast<Config*>(this)->getMaxRetransmit());}
    virtual void setMaxRetransmit(const IntConfigValue& maxRetransmit);
    virtual const DoubleConfigValue& getAckTimeout() const;
    virtual DoubleConfigValue& getAckTimeoutForUpdate() { return const_cast<DoubleConfigValue&>(const_cast<Config*>(this)->getAckTimeout());}
    virtual void setAckTimeout(const DoubleConfigValue& ackTimeout);
    virtual const DoubleConfigValue& getAckRandomFactor() const;
    virtual DoubleConfigValue& getAckRandomFactorForUpdate() { return const_cast<DoubleConfigValue&>(const_cast<Config*>(this)->getAckRandomFactor());}
    virtual void setAckRandomFactor(const DoubleConfigValue& ackRandomFactor);
};

/**
 * Class generated from <tt>inet/_extra/applications/codefagent/CoDefConfig.msg:39</tt> by nedtool.
 * <pre>
 * class SessionConfig
 * {
 *     int sid;
 *     Config MitigatingConfig;
 *     Config IdleConfig;
 * }
 * </pre>
 */
class INET_API SessionConfig
{
  protected:
    int sid = 0;
    Config MitigatingConfig;
    Config IdleConfig;

  private:
    void copy(const SessionConfig& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SessionConfig&);

  public:
    SessionConfig();
    SessionConfig(const SessionConfig& other);
    virtual ~SessionConfig();
    SessionConfig& operator=(const SessionConfig& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getSid() const;
    virtual void setSid(int sid);
    virtual const Config& getMitigatingConfig() const;
    virtual Config& getMitigatingConfigForUpdate() { return const_cast<Config&>(const_cast<SessionConfig*>(this)->getMitigatingConfig());}
    virtual void setMitigatingConfig(const Config& MitigatingConfig);
    virtual const Config& getIdleConfig() const;
    virtual Config& getIdleConfigForUpdate() { return const_cast<Config&>(const_cast<SessionConfig*>(this)->getIdleConfig());}
    virtual void setIdleConfig(const Config& IdleConfig);
};

} // namespace inet

#endif // ifndef __INET_CODEFCONFIG_M_H

